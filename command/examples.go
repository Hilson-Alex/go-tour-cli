// Author: [Hilson-Alex](https://github.com/Hilson-Alex)

// Package command implements the CLI commands for some
// Go Tour exercises demonstration.
package command

import (
	"fmt"
	"io"
	"strings"
)

import (
	"github.com/Hilson-Alex/go-tour-cli/exercises"
	"github.com/Hilson-Alex/go-tour-cli/outputFormat"
)

var asError = outputFormat.AsError

// ExampleMap maps each command for an interactive scenario
// where a user can send data to test the exercise implementation.
// Some exercises were left aside, like the Stringers and the
// binary trees, because I can't find a cool way to add user
// interaction with them on a CLI.
var ExampleMap = map[Prompt]func(){
	SQRT:       squareRootExample,
	IMAGE:      imageExample,
	WORD_COUNT: wordCount,
	FIBONACCI:  fibonacci,
	ROT13:      rot13,
	HELP:       help,
}

// PrintHeader Prints a beautiful header text with a centered text.
func PrintHeader(header string) {
	var centeredHeader = fmt.Sprintf("%-60s", fmt.Sprintf("%30s", header))
	fmt.Println(">>>>", centeredHeader, "<<<<")
}

// squareRootExample asks for a number to the user and calculate
// its square root. Print an error for invalid or negative numbers.
func squareRootExample() {
	var number float64
	PrintHeader("SQUARE ROOT")
	for keep := true; keep; {
		fmt.Println("Type a number to compute the square root:")
		if err := ReadValue(SQRT, &number); err != nil {
			fmt.Println(asError("INVALID NUMBER"))
			continue
		}
		var result, err = exercises.SquareRoot(number)
		if err != nil {
			fmt.Println(asError(err.Error()))
			continue
		}
		fmt.Println("The square root of", number, "is", result)
		keep = SQRT.AskRerun()
	}
}

// imageExample follows the image exercise of the Go Tour.
// It lets the user choose a generator function to create an
// image and saves it in a file. It was originally the slice
// exercise, but it was changed to image because both exercises
// implement the same thing in different ways.
func imageExample() {
	const width, height = 256, 256
	var functions = []string{exercises.AND, exercises.OR, exercises.XOR, exercises.MULTIPLY, exercises.MEAN}
	var selectedName string
	PrintHeader("IMAGE")
	for keep := true; keep; {
		fmt.Println("Choose a function for the image generation")
		fmt.Println("The function will take the x and y axis as parameters")
		fmt.Println("functions:", strings.Join(functions, ", "))
		if err := ReadValue(IMAGE, &selectedName); err != nil {
			fmt.Println(asError(err.Error()))
			continue
		}
		var image, err = exercises.NewImg(selectedName)
		if err != nil {
			fmt.Println(asError(err.Error()))
			continue
		}
		if err = image.Save(); err != nil {
			fmt.Println(asError(err.Error()))
			break
		}
		fmt.Println("Image saved as", exercises.SaveFile)
		keep = IMAGE.AskRerun()
	}
}

// wordCount counts how many times each word appears in the
// user input.
func wordCount() {
	PrintHeader("WORD COUNT")
	for keep := true; keep; keep = WORD_COUNT.AskRerun() {
		fmt.Println("Write a phrase to count the words:")
		var text = WORD_COUNT.ReadString()
		fmt.Println(exercises.WordCount(text))
	}
}

// fibonacci keeps printing the fibonacci sequence while the
// user agrees to continue.
func fibonacci() {
	PrintHeader("FIBONACCI")
	fmt.Println("While you agree to continue, this function will print the next number in the fibonacci sequence")
	var fib = exercises.Fibonacci()
	for keep := true; keep; keep = FIBONACCI.AskRerun() {
		fmt.Println("The next number in the sequence is:", fib())
	}
}

// rot13 encode the user input using the rot13 pattern.
func rot13() {
	PrintHeader("ROT13")
	for keep := true; keep; keep = ROT13.AskRerun() {
		fmt.Println("Write something to encode/decode")
		var text = ROT13.ReadString()
		var reader = exercises.NewROT13(strings.NewReader(text))
		var bytes, err = io.ReadAll(reader)
		if err != nil {
			fmt.Println(asError(err.Error()))
			break
		}
		fmt.Printf("O resultado Ã©: %q\n", bytes)
	}
}

// help describes the allowed functions for the user.
func help() {
	PrintHeader("HELP")
	SQRT.describe("Calculates the approximate square root of a given number.")
	IMAGE.describe("Creates an image generated by an applied a generator function that generates a pixel based on its x and y axis.")
	WORD_COUNT.describe("Counts how many times each word appears in a phrase.")
	FIBONACCI.describe("Prints the fibonacci sequence while it doesn't receive a stop command")
	ROT13.describe("Encode/Decode a text by the ROT13 method, where you exchange a letter for another 13 places away.\nSee more on: https://en.wikipedia.org/wiki/ROT13")
	HELP.describe("Prints this message.")
	fmt.Println("Press enter to go back.")
	fmt.Scanln()
}
